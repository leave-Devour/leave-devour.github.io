<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>reversing.kr-Easy_crack</title>
      <link href="/2019/07/23/%C2%96%C2%96reversing-kr-Easy-crack/"/>
      <url>/2019/07/23/%C2%96%C2%96reversing-kr-Easy-crack/</url>
      
        <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><a id="more"></a><p><img src="https://raw.githubusercontent.com/leave-Devour/leave-Devour.github.io/master/images/20190723214824.png" alt></p><p><code>猜想</code>：会不会是单纯的一个一个的字符的验证呢？</p><p>放进Ollydbg</p><p><code>查找</code>关键字</p><p><img src="https://raw.githubusercontent.com/leave-Devour/leave-Devour.github.io/master/images/20190723215545.png" alt></p><p>看到congratulation，果断跟进去，断在入口处，这题就ok啦；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">00401080  /$  83EC 64       sub esp,0x64</span><br><span class="line">00401083  |.  57            push edi</span><br><span class="line">00401084  |.  B9 18000000   mov ecx,0x18</span><br><span class="line">00401089  |.  33C0          xor eax,eax</span><br><span class="line">0040108B  |.  8D7C24 05     lea edi,dword ptr ss:[esp+0x5]</span><br><span class="line">0040108F  |.  C64424 04 00  mov byte ptr ss:[esp+0x4],0x0</span><br><span class="line">00401094  |.  6A 64         push 0x64                                ; /Count = 64 (100.)</span><br><span class="line">00401096  |.  F3:AB         rep stos dword ptr es:[edi]              ; |</span><br><span class="line">00401098  |.  66:AB         stos word ptr es:[edi]                   ; |</span><br><span class="line">0040109A  |.  AA            stos byte ptr es:[edi]                   ; |</span><br><span class="line">0040109B  |.  8B7C24 70     mov edi,dword ptr ss:[esp+0x70]          ; |user32.76DC635B</span><br><span class="line">0040109F  |.  8D4424 08     lea eax,dword ptr ss:[esp+0x8]           ; |</span><br><span class="line">004010A3  |.  50            push eax                                 ; |Buffer = 00000001</span><br><span class="line">004010A4  |.  68 E8030000   push 0x3E8                               ; |ControlID = 3E8 (1000.)</span><br><span class="line">004010A9  |.  57            push edi                                 ; |hWnd = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">004010AA  |.  FF15 9C504000 call dword ptr ds:[&lt;&amp;USER32.GetDlgItemTe&gt;; \GetDlgItemTextA</span><br><span class="line">004010B0  |.  807C24 05 61  cmp byte ptr ss:[esp+0x5],0x61           ;  第二個字符</span><br><span class="line">004010B5  |.  75 7E         jnz short Easy_Cra.00401135</span><br><span class="line">004010B7  |.  6A 02         push 0x2</span><br><span class="line">004010B9  |.  8D4C24 0A     lea ecx,dword ptr ss:[esp+0xA]</span><br><span class="line">004010BD  |.  68 78604000   push Easy_Cra.00406078                   ;  5y</span><br><span class="line">004010C2  |.  51            push ecx</span><br><span class="line">004010C3  |.  E8 88000000   call Easy_Cra.00401150                   ;  第三 第四字符</span><br><span class="line">004010C8  |.  83C4 0C       add esp,0xC</span><br><span class="line">004010CB  |.  85C0          test eax,eax</span><br><span class="line">004010CD  |.  75 66         jnz short Easy_Cra.00401135</span><br><span class="line">004010CF  |.  53            push ebx</span><br><span class="line">004010D0  |.  56            push esi</span><br><span class="line">004010D1  |.  BE 6C604000   mov esi,Easy_Cra.0040606C                ;  R3versing</span><br><span class="line">004010D6  |.  8D4424 10     lea eax,dword ptr ss:[esp+0x10]</span><br><span class="line">004010DA  |&gt;  8A10          /mov dl,byte ptr ds:[eax]                ;  這裡判斷第五個字符到最後</span><br><span class="line">004010DC  |.  8A1E          |mov bl,byte ptr ds:[esi]</span><br><span class="line">004010DE  |.  8ACA          |mov cl,dl</span><br><span class="line">004010E0  |.  3AD3          |cmp dl,bl</span><br><span class="line">004010E2  |.  75 1E         |jnz short Easy_Cra.00401102</span><br><span class="line">004010E4  |.  84C9          |test cl,cl</span><br><span class="line">004010E6  |.  74 16         |je short Easy_Cra.004010FE</span><br><span class="line">004010E8  |.  8A50 01       |mov dl,byte ptr ds:[eax+0x1]</span><br><span class="line">004010EB  |.  8A5E 01       |mov bl,byte ptr ds:[esi+0x1]</span><br><span class="line">004010EE  |.  8ACA          |mov cl,dl</span><br><span class="line">004010F0  |.  3AD3          |cmp dl,bl</span><br><span class="line">004010F2  |.  75 0E         |jnz short Easy_Cra.00401102</span><br><span class="line">004010F4  |.  83C0 02       |add eax,0x2</span><br><span class="line">004010F7  |.  83C6 02       |add esi,0x2</span><br><span class="line">004010FA  |.  84C9          |test cl,cl</span><br><span class="line">004010FC  |.^ 75 DC         \jnz short Easy_Cra.004010DA</span><br><span class="line">004010FE  |&gt;  33C0          xor eax,eax</span><br><span class="line">00401100  |.  EB 05         jmp short Easy_Cra.00401107</span><br><span class="line">00401102  |&gt;  1BC0          sbb eax,eax</span><br><span class="line">00401104  |.  83D8 FF       sbb eax,-0x1</span><br><span class="line">00401107  |&gt;  5E            pop esi</span><br><span class="line">00401108  |.  5B            pop ebx</span><br><span class="line">00401109  |.  85C0          test eax,eax</span><br><span class="line">0040110B  |.  75 28         jnz short Easy_Cra.00401135</span><br><span class="line">0040110D  |.  807C24 04 45  cmp byte ptr ss:[esp+0x4],0x45           ;  第一個字符</span><br><span class="line">00401112  |.  75 21         jnz short Easy_Cra.00401135</span><br><span class="line">00401114  |.  6A 40         push 0x40                                ; /Style = MB_OK|MB_ICONASTERISK|MB_APPLMODAL</span><br><span class="line">00401116  |.  68 58604000   push Easy_Cra.00406058                   ; |EasyCrackMe</span><br><span class="line">0040111B  |.  68 44604000   push Easy_Cra.00406044                   ; |Congratulation !!</span><br><span class="line">00401120  |.  57            push edi                                 ; |hOwner = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">00401121  |.  FF15 A0504000 call dword ptr ds:[&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA</span><br><span class="line">00401127  |.  6A 00         push 0x0                                 ; /Result = 0x0</span><br><span class="line">00401129  |.  57            push edi                                 ; |hWnd = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">0040112A  |.  FF15 A4504000 call dword ptr ds:[&lt;&amp;USER32.EndDialog&gt;]  ; \EndDialog</span><br><span class="line">00401130  |.  5F            pop edi</span><br><span class="line">00401131  |.  83C4 64       add esp,0x64</span><br><span class="line">00401134  |.  C3            retn</span><br><span class="line">00401135  |&gt;  6A 10         push 0x10                                ; /Style = MB_OK|MB_ICONHAND|MB_APPLMODAL</span><br><span class="line">00401137  |.  68 58604000   push Easy_Cra.00406058                   ; |EasyCrackMe</span><br><span class="line">0040113C  |.  68 30604000   push Easy_Cra.00406030                   ; |Incorrect Password</span><br><span class="line">00401141  |.  57            push edi                                 ; |hOwner = 01230BE2 (&apos;Easy CrackMe&apos;,class=&apos;#32770&apos;)</span><br><span class="line">00401142  |.  FF15 A0504000 call dword ptr ds:[&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA</span><br><span class="line">00401148  |.  5F            pop edi</span><br><span class="line">00401149  |.  83C4 64       add esp,0x64</span><br><span class="line">0040114C  \.  C3            retn</span><br></pre></td></tr></table></figure><p>最后得出的password就是：<code>Ea5yR3versing</code></p>]]></content>
      
      
      <categories>
          
          <category> RE reversing.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.kr-input</title>
      <link href="/2019/07/23/Pwnable-kr-input/"/>
      <url>/2019/07/23/Pwnable-kr-input/</url>
      
        <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a><center>info</center></h2><p>源码如下</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to pwnable.kr\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Let's see if you know how to give input to program\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Just give me correct inputs then you will get the flag :)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//argc</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here's your flag</span></span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出前面有5个地方需要绕过的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：就是argc和argv</span><br><span class="line">2：stdin和stderr</span><br><span class="line">3：env</span><br><span class="line">4：存在文件\x0a </span><br><span class="line">5：socket通信</span><br></pre></td></tr></table></figure><p>记录下一些get到的知识点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、用pipe创建管道，试两个进程间进行通信</span><br><span class="line">2、用fork创建进程</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> writepipe[<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;, <span class="comment">/* parent -&gt; child */</span></span><br><span class="line">    readpipe [<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;; <span class="comment">/* child -&gt; parent */</span></span><br><span class="line"><span class="keyword">pid_t</span>   childpid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * CREATE THE PAIR OF PIPES</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pipes have two ends but just one direction: to get a two-way</span></span><br><span class="line"><span class="comment"> * conversation you need two pipes. It's an error if we cannot make</span></span><br><span class="line"><span class="comment"> * them both, and we define these macros for easy reference.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">writepipe[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( pipe(readpipe) &lt; <span class="number">0</span>  ||  pipe(writepipe) &lt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FATAL: cannot create pipe */</span></span><br><span class="line">    <span class="comment">/* close readpipe[0] &amp; [1] if necessary */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_READ readpipe[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_WRITE readpipe[1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_READ  writepipe[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_WRITE    writepipe[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (childpid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FATAL: cannot fork child */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( childpid == <span class="number">0</span> )   <span class="comment">/* in the child */</span></span><br><span class="line">&#123;</span><br><span class="line">    close(PARENT_WRITE);</span><br><span class="line">    close(PARENT_READ);</span><br><span class="line"></span><br><span class="line">    dup2(CHILD_READ,  <span class="number">0</span>);  close(CHILD_READ);</span><br><span class="line">    dup2(CHILD_WRITE, <span class="number">1</span>);  close(CHILD_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do child stuff */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>                <span class="comment">/* in the parent */</span></span><br><span class="line">&#123;</span><br><span class="line">    close(CHILD_READ);</span><br><span class="line">    close(CHILD_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do parent stuff */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">首先fork()创建的进程(&quot;即当前的进程的镜像&quot;),两者的初始状态一样，执行互不干扰。</span><br><span class="line">另外fork() 复制程序时不是从** #include **处开始复制的，因为fork是把进程当前的情况拷贝一份，所以执行fork()，前面的已经执行完了，fork()只拷贝下一行代码到新进程。</span><br><span class="line"></span><br><span class="line">pipe(int fd[2])函数可以得到两个file descriptors 形成一个单向的pipe,fd[0]固定为读端，fd[1]固定为写端。</span><br><span class="line"></span><br><span class="line">另外 execv家族有很多，其中的execve()可以控制传进去的envp,env</span><br><span class="line">int execve(const char *filename, char *const argv[ ], char *const envp[ ]);</span><br></pre></td></tr></table></figure><p><a href="http://unixwiz.net/techtips/remap-pipe-fds.html" target="_blank" rel="noopener">pipe</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf Pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
